**Arquivo: fase-06-login-keycloak.clinerules**

---

### üìÖ FASE 06: Login com Keycloak ‚Äì Fluxo OAuth2 + Sess√£o JWT

**Objetivo principal:**
Permitir que o usu√°rio fa√ßa login atrav√©s do Keycloak utilizando o fluxo Authorization Code (OAuth2) e que o JWT resultante seja armazenado automaticamente na sess√£o da aplica√ß√£o BFF PHP, para ser usado nas chamadas autenticadas √† API via Kong.

---

### ‚úèÔ∏è INSTRU√á√ïES DETALHADAS DE IMPLEMENTA√á√ÉO

#### 1. Criar rota `/login`
- Essa rota redireciona o usu√°rio para o Keycloak com os par√¢metros de login via Authorization Code:
```php
<?php
$client_id = 'frontend-bff';
$redirect_uri = 'http://localhost:8080/callback';
$auth_url = "http://localhost:8082/realms/app-demo/protocol/openid-connect/auth?response_type=code&client_id=$client_id&redirect_uri=$redirect_uri";

header("Location: $auth_url");
exit;
```

#### 2. Criar rota `/callback`
- Ap√≥s o login, o Keycloak redireciona para `/callback?code=...`
- Essa rota deve trocar o `code` por um `access_token`:
```php
<?php
session_start();

if (!isset($_GET['code'])) {
  die('C√≥digo de autoriza√ß√£o n√£o encontrado.');
}

$code = $_GET['code'];
$client_id = 'frontend-bff';
$client_secret = 'SUA_CLIENT_SECRET_AQUI';
$redirect_uri = 'http://localhost:8080/callback';

$token_url = 'http://keycloak:8080/realms/app-demo/protocol/openid-connect/token';

$data = http_build_query([
  'grant_type' => 'authorization_code',
  'code' => $code,
  'redirect_uri' => $redirect_uri,
  'client_id' => $client_id,
  'client_secret' => $client_secret
]);

$opts = [
  'http' => [
    'method' => 'POST',
    'header' => 'Content-Type: application/x-www-form-urlencoded',
    'content' => $data
  ]
];

$context = stream_context_create($opts);
$response = file_get_contents($token_url, false, $context);

if ($response === FALSE) {
  die('Erro ao trocar code por token.');
}

$token = json_decode($response, true);
session_regenerate_id();
$_SESSION['jwt'] = $token['access_token'];

header('Location: /inicio');
exit;
```

> **Importante:** o client `frontend-bff` deve estar como `confidential` e ter `client_secret` habilitado.

#### 3. Menu e links de sess√£o
- Adicione links nas views:
```html
<a href="/login">Login</a> | <a href="/logout">Logout</a>
```
- Em `/logout`, destrua a sess√£o e redirecione:
```php
<?php
session_start();
session_destroy();
header("Location: /");
```

---

### üîç CRIT√âRIOS DE VALIDA√á√ÉO

1. Ao acessar `/login`, o usu√°rio √© redirecionado ao Keycloak.
2. Ap√≥s login, √© redirecionado de volta para `/callback`, com sess√£o criada.
3. A vari√°vel `$_SESSION['jwt']` √© preenchida com token JWT v√°lido.
4. A partir desse ponto, qualquer p√°gina protegida (produtos, pedidos, etc) funciona normalmente.
5. Logout limpa a sess√£o corretamente.

---

### ‚ö†Ô∏è REGRAS DE COMPATIBILIDADE
- O redirect URI **deve bater com o configurado no Keycloak**.
- O JWT deve continuar compat√≠vel com o plugin JWT configurado no Kong.
- O nome do client deve ser exatamente `frontend-bff`.

---

### üöÄ PR√ìXIMOS PASSOS

Quando essa fase estiver conclu√≠da, registre:
```ini
[Fase 06] Login com Keycloak + sess√£o JWT = ‚úÖ CONCLU√çDO
```

E siga para:
- `fase-07-frontend-bootstrap.clinerules` ‚ûî interface visual com Bootstrap 5 e navega√ß√£o clara entre as p√°ginas.

