**Arquivo: fase-01-estrutura-e-docker.clinerules**

---

### üìÖ FASE 01: Estrutura Inicial do Projeto + Docker

**Objetivo principal:**
Estabelecer a estrutura de pastas e arquivos base do projeto, al√©m de garantir o funcionamento de todos os containers em ambiente Docker de forma compat√≠vel com o futuro uso do Kong, Keycloak, API PHP e BFF PHP.

---

### ‚úèÔ∏è INSTRU√á√ïES DETALHADAS DE IMPLEMENTA√á√ÉO

#### 1. Estrutura de diret√≥rios do projeto
Crie a seguinte estrutura de pastas na raiz do projeto:

```
/app-root
‚îú‚îÄ‚îÄ bff/
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ public/
‚îú‚îÄ‚îÄ api/
‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile
‚îÇ   ‚îî‚îÄ‚îÄ public/
‚îú‚îÄ‚îÄ kong/
‚îú‚îÄ‚îÄ keycloak/
‚îî‚îÄ‚îÄ docker-compose.yml
```

Cada diret√≥rio conter√° os arquivos e configura√ß√µes correspondentes a cada servi√ßo.

---

#### 2. Dockerfile para BFF (em `bff/Dockerfile`)
Use uma imagem base do PHP com Apache. Exemplo:

```Dockerfile
FROM php:8.2-apache
COPY ./public /var/www/html/
EXPOSE 80
```

---

#### 3. Dockerfile para API (em `api/Dockerfile`)
Mesmo padr√£o da BFF, mas para a aplica√ß√£o da API:

```Dockerfile
FROM php:8.2-apache
COPY ./public /var/www/html/
EXPOSE 80
```

---

#### 4. docker-compose.yml
Configure todos os servi√ßos do projeto para funcionarem em rede:

```yaml
version: '3.9'

services:
  bff:
    build: ./bff
    container_name: bff
    ports:
      - "8080:80"
    networks:
      - rede_app

  api:
    build: ./api
    container_name: api
    ports:
      - "8081:80"
    networks:
      - rede_app

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.3
    command: start-dev
    container_name: keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    ports:
      - "8082:8080"
    networks:
      - rede_app

  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER=kong
      POSTGRES_PASSWORD=kong
      POSTGRES_DB=kong
    networks:
      - rede_app

  kong:
    image: kong:3.4
    container_name: kong
    depends_on:
      - kong-database
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    ports:
      - "8000:8000"   # Gateway HTTP
      - "8001:8001"   # Admin API
    networks:
      - rede_app

networks:
  rede_app:
    driver: bridge
```

---

### üîç CRIT√âRIOS DE VALIDA√á√ÉO

1. Todos os containers devem iniciar corretamente ao executar:
```bash
docker-compose up -d --build
```

2. Os seguintes endpoints devem estar acess√≠veis no navegador ou via curl/postman:
- http://localhost:8080 ‚ûî BFF (vazio por enquanto)
- http://localhost:8081 ‚ûî API (vazio por enquanto)
- http://localhost:8082 ‚ûî Keycloak (admin/admin)
- http://localhost:8001 ‚ûî Kong Admin
- http://localhost:8000 ‚ûî Kong Proxy

3. Todos os servi√ßos devem estar na mesma rede Docker (`rede_app`).

4. Deve ser criada a entrada no arquivo `control.clinecheckpoint` com status:
```ini
[Fase 01] Estrutura inicial e docker - ‚úÖ CONCLU√çDO
```

---

### ‚ö†Ô∏è REGRAS DE COMPATIBILIDADE
- Use portas padronizadas e nomes de container que ser√£o reutilizados nas fases futuras.
- A rede `rede_app` √© obrigat√≥ria para comunica√ß√£o entre BFF, API, Kong e Keycloak.
- Os nomes `bff`, `api`, `keycloak`, `kong`, `kong-database` s√£o fixos e **devem ser usados nos arquivos seguintes** para garantir integra√ß√£o progressiva.

---

### üöÄ PR√ìXIMOS PASSOS
Quando esta fase estiver 100% conclu√≠da, prossiga para:
- `fase-02-keycloak.clinerules`

(N√£o prossiga sem garantir que tudo est√° funcional e validado).

