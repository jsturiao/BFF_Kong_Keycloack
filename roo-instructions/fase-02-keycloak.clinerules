**Arquivo: fase-02-keycloak.clinerules**

---

### üìÖ FASE 02: Keycloak ‚Äì Configura√ß√£o de Realm, Cliente e JWT

**Objetivo principal:**
Configurar o Keycloak para funcionar como servidor de autentica√ß√£o da aplica√ß√£o, emitindo tokens JWT para login e consumo da API.
Essa configura√ß√£o deve ser feita de forma que o Kong (na Fase 03) e o BFF (na Fase 05) possam usar os JWTs emitidos pelo Keycloak.

---

### ‚úèÔ∏è INSTRU√á√ïES DETALHADAS DE IMPLEMENTA√á√ÉO

#### 1. Acesso ao Keycloak
- URL esperada: `http://localhost:8082`
- Admin: `admin`
- Senha: `admin`
- Vers√£o da imagem: `23.0.3`

#### 2. Criar Realm
- Nome do realm: `app-demo`

#### 3. Criar Cliente
- Nome: `frontend-bff`
- Tipo de acesso: `confidential`
- Habilitar fluxo: `Authorization Code`
- Habilitar "Standard Flow" e "Direct Access Grants"
- Redirecionamento v√°lido:
  - `http://localhost:8080/callback`
  - `http://bff/callback`
- URL base do cliente: `http://localhost:8080`
- Outras configura√ß√µes:
  - Habilitar "Service Accounts" se precisar de token sem login interativo
  - Habilitar "Fine Grain OpenID Connect Configuration"

#### 4. Configurar JWT
- Algoritmo: `RS256`
- Acesso via JWT: ativado
- Link p√∫blico para JWKS (para o Kong validar):
  - `http://keycloak:8080/realms/app-demo/protocol/openid-connect/certs`

#### 5. Criar Roles
- Criar duas roles:
  - `user`
  - `admin`

#### 6. Criar Usu√°rios de Teste
- Usu√°rio: `admin`
  - Senha: `123`
  - Roles: `admin`
- Usu√°rio: `usuario`
  - Senha: `123`
  - Roles: `user`

#### 7. Validar Emiss√£o de Tokens
- Usar Postman ou cURL para simular login:
```bash
curl -X POST \
  http://localhost:8082/realms/app-demo/protocol/openid-connect/token \
  -H 'Content-Type: application/x-www-form-urlencoded' \
  -d 'client_id=frontend-bff' \
  -d 'client_secret=SECRET_AQUI' \
  -d 'username=admin' \
  -d 'password=123' \
  -d 'grant_type=password'
```
- O resultado deve conter:
  - `access_token`
  - `expires_in`
  - `token_type: Bearer`

> **Importante:** guarde esse `access_token`, pois ele ser√° usado para testar acesso via Kong na Fase 03.

---

### ‚ö†Ô∏è REGRAS DE COMPATIBILIDADE
- O nome do realm **deve ser** `app-demo`.
- O nome do client **deve ser** `frontend-bff`.
- O JWT emitido **deve usar RS256** e estar dispon√≠vel no endpoint de JWKS.
- Os nomes dos usu√°rios e roles **devem ser id√™nticos** aos definidos aqui para evitar conflitos nas fases seguintes.

---

### üîç CRIT√âRIOS DE VALIDA√á√ÉO

1. Login via cURL retorna `access_token` v√°lido.
2. A interface web do Keycloak mostra:
   - Realm `app-demo`
   - Client `frontend-bff` com redirect correto
   - Roles atribu√≠das
3. JWKS acess√≠vel via:
   - `http://localhost:8082/realms/app-demo/protocol/openid-connect/certs`
   - `http://keycloak:8080/realms/app-demo/protocol/openid-connect/certs`

---

### üöÄ PR√ìXIMOS PASSOS

Quando essa fase for conclu√≠da com sucesso, atualize o arquivo `control.clinecheckpoint` com:
```ini
[Fase 02] Keycloak: configura√ß√£o de realm, client e JWT = ‚úÖ CONCLU√çDO
```

Em seguida, prossiga para a:
- `fase-03-kong.clinerules` ‚ûî que usaremos o JWT emitido aqui para proteger a API via Kong.

**N√£o prossiga se o JWT n√£o for obtido corretamente ou se o JWKS estiver inacess√≠vel.**

